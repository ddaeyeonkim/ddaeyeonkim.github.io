"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[710],{1424:function(e,n,t){t.r(n),t.d(n,{Head:function(){return E},default:function(){return d}});var l=t(1151),r=t(7294);function a(e){const n=Object.assign({h2:"h2",h3:"h3",p:"p",br:"br",pre:"pre",code:"code",ul:"ul",li:"li"},(0,l.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.h2,null,"Item 11. 가독성을 목표로 설계하라"),"\n",r.createElement(n.h3,null,"인지 부하 감소"),"\n",r.createElement(n.p,null,"숙련된 코틀린 개발자도 구현 B를 이해하는데 다소 시간이 걸린다.",r.createElement(n.br),"\n","기본적으로 '인지 부하'를 줄이는 방향으로 코드를 작성하자."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-kotlin"},"// 구현 A\nif (person != null && person.isAdult) {\n    view.showPerson(person)\n} else {\n    view.showError()\n}\n// 구현 B\nperson?.takeIf { it.isAdult }\n    ?.let(view::showPerson)\n    ?: view.showError()\n")),"\n",r.createElement(n.h3,null,"let 사용 케이스"),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"null check"),"\n"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-kotlin"},"class Person(val name: String)\nvar person: Person? = null\n\nfun printName() {\n\tperson?.let {\n    \tprint(it.name)\n    }\n}\n")),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"연산을 아규먼트 처리 후로 이동시킬 때"),"\n"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-kotlin"},"// A\nprint(students.filter{}.joinToString{})\n// B\nstudents.filter{}.joinToString{}.let(::print)\n")),"\n",r.createElement(n.ul,null,"\n",r.createElement(n.li,null,"데코레이터를 사용해서 객체를 랩할 떄"),"\n"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-kotlin"},'val obj = FileInputStream("/file.gz")\n\t.let(::BufferedInputStream)\n    .let(::ZipInputStream)\n    .readObject() as SomeObject\n')),"\n",r.createElement(n.h2,null,"Item 12. 연산자 오버로드를 할 때는 의미에 맞게 사용하라"),"\n",r.createElement(n.p,null,"관례에 어긋나는 사용은 지양하자."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-kotlin"},"fun Int.factroial(): Int = (1..this).product()\nfun Iterable<Int>.product(): Int = fold(1) { acc, i -> acc * i }\n\n// Good\nprint(10 * 6.factorial())\n// Bad\noperator fun Int.not() = factorial()\nprint(10 * !6)\n")),"\n",r.createElement(n.h3,null,"분명하지 않은 경우"),"\n",r.createElement(n.p,null,"infix 확장 함수나 top-level 함수 사용"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-kotlin"},'// operator function : Bad\noperator fun Int.times(operation: () -> Unit) = repeat(this) { operation() }\n3 * { println("Hello") } // HelloHelloHello\n\n// infix function : Good\ninfix fun Int.timesRepeated(operation: () -> Unit) = repeat(this) { operation() }\n3 timesRepeated { println("Hello") } // HelloHelloHello\n\n// top-level function : Good\nrepeat(this) { print("Hello") }\n')),"\n",r.createElement(n.h3,null,"규칙을 무시해도 되는 경우"),"\n",r.createElement(n.p,null,"도메인 특화 언어를 설계할 때(ex. HTML DSL)"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-kotlin"},'body {\n    div {\n        +"some text"\n    }\n}\n')),"\n",r.createElement(n.h2,null,"Item 13. Unit?을 리턴하지 말라"),"\n",r.createElement(n.p,null,r.createElement(n.code,null,"Unit?"),"을 리턴하면 오해를 불러 일으키기 쉽다.",r.createElement(n.br),"\n","기본적으로 ",r.createElement(n.code,null,"Unit?"),"을 리턴하거나, 이를 기반으로 연산하지 말자."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-kotlin"},"// showData()의 결과가 null이면, showError()도 호출될 수 있음\nfun showData(): Unit?\ngetData()?.let { view.showData() } ?: view.showError()\n")))}var o=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?r.createElement(n,e,r.createElement(a,e)):a(e)},c=t(8070),i=t(3673),u=t(9861),m=t(112),s=t(917);const p=e=>{let{data:n,children:t}=e;return(0,s.tZ)(i.Z,null,(0,s.tZ)(u.Z,{title:n.mdx.frontmatter.title,date:n.mdx.frontmatter.date,categories:n.mdx.frontmatter.categories}),(0,s.tZ)(m.Z,null,t))},E=e=>{let{data:n}=e;return(0,s.tZ)(c.Z,{title:n.mdx.frontmatter.title})};function d(e){return r.createElement(p,e,r.createElement(o,e))}}}]);
//# sourceMappingURL=component---src-pages-mdx-frontmatter-slug-tsx-content-file-path-reading-contents-effective-kotlin-items-11-to-13-mdx-8a7b9ce370951505020f.js.map