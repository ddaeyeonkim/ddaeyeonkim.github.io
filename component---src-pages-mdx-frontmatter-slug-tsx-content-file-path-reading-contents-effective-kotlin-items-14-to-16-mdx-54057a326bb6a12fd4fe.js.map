{"version":3,"file":"component---src-pages-mdx-frontmatter-slug-tsx-content-file-path-reading-contents-effective-kotlin-items-14-to-16-mdx-54057a326bb6a12fd4fe.js","mappings":"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","sources":["webpack://blog/./reading_contents/effective-kotlin-items-14-to-16.mdx","webpack://blog/./src/pages/{mdx.frontmatter__slug}.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    br: \"br\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Item 14. 변수 타입이 명확하지 않은 경우 확실하게 지정하라\"), \"\\n\", React.createElement(_components.p, null, \"가독성을 위해 코드를 설계할 때 읽는 사람에게 중요한 정보를 숨겨서는 안 된다.\", React.createElement(_components.br), \"\\n\", \"코드 정의로 쉽게 이동할 수 없는 깃허브 같은 환경에서도 읽을 수 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-kotlin\"\n  }, \"// bad\\nval data = getSomeData()\\n// good\\nval data: UserData = getSomeData()\\n\")), \"\\n\", React.createElement(_components.p, null, \"코틀린은 강력한 타입추론 시스템을 가지고 있어서 많은 경우에 타입 생략이 가능하다.\", React.createElement(_components.br), \"\\n\", \"그래서 개발할 때 IDE에서 타입 힌트를 표시하도록 설정해서 사용하고 있었다.\", React.createElement(_components.br), \"\\n\", \"하지만 책의 내용대로 타입 힌트를 볼 수 없는 환경에서 읽는 사람도 고려해서 적절히 타입을 명시하는 것이 좋겠다.\"), \"\\n\", React.createElement(_components.h2, null, \"Item 15. 리시버를 명시적으로 참조하라\"), \"\\n\", React.createElement(_components.p, null, \"스코프 내부에 둘 이상의 리시버가 있는 경우, 리시버를 명시적으로 나타내는 것이 좋다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-kotlin\"\n  }, \"class Node(val name: String) {\\n    // 자식 노드 생성\\n    fun makeChild(childName: String): Node? =\\n        create(\\\"$name.$childName\\\")  // Node(\\\"parent.child\\\")\\n            .apply { print(\\\"Created ${name}\\\") }  // print(\\\"Created parent\\\")\\n\\n    fun create(name: String): Node? = Node(name)\\n}\\n\\nfun main() {\\n    val node = Node(\\\"parent\\\")\\n    node.makeChild(\\\"child\\\")\\n}\\n\\n// 결과\\n// Create parent\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"create\"), \" 메서드의 리턴타입이 nullable이어서 apply 블록에서 호출한 \", React.createElement(_components.code, null, \"name\"), \"은 parent의 name을 참조하게 되었다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"의도대로 동작하도록 고친다면 다음과 같다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-kotlin\"\n  }, \"fun makeChild(childName: String): Node? =\\n    create(\\\"$name.$childName\\\")  // Node(\\\"parent.child\\\")\\n        .apply { print(\\\"Created ${this?.name}\\\") }  // print(\\\"Created parent.child\\\")\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"nullable을 처리할 때는 let이나 also를 사용하는 것이 더 좋다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-kotlin\"\n  }, \"fun makeChild(childName: String): Node? =\\n    create(\\\"$name.$childName\\\")  // Node(\\\"parent.child\\\")\\n        .also { print(\\\"Created ${it?.name}\\\") }  // print(\\\"Created parent.child\\\")\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"리시버가 명확하지 않다면, 명시적으로 리시버를 지정하자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-kotlin\"\n  }, \"fun makeChild(childName: String): Node? =\\n    create(\\\"$name.$childName\\\")  // Node(\\\"parent.child\\\")\\n        .apply { print(\\\"Created ${this?.name} in ${this@Node.name}\\\") } // print(\\\"Created parent.child in parent\\\")\\\"\\n\")), \"\\n\", React.createElement(_components.h3, null, \"DSL 마커\"), \"\\n\", React.createElement(_components.p, null, \"암묵적으로 외부 리시버를 사용하는 것을 막는 \", React.createElement(_components.code, null, \"DslMarker\"), \" 메타 어노테이션(어노테이션을 위한 어노테이션).\\nDsl 설계에 따라서 사용 여부를 결정하는 것이 좋다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-kotlin\"\n  }, \"@DslMarker\\nannotation class HtmlDsl\\n\\nfun table(f: TableDsl.() -> Unit) { /* .. */ }\\n\\n@HtmlDsl\\nclass TableDsl { /* .. */ }\\n\\ntable {\\n  tr {\\n    td { +\\\"Column 1\\\" }\\n    td { +\\\"Column 2\\\" }\\n    tr { /* .. */ } // 컴파일 에러\\n    this@table.tr { /* .. */ } // 명시적 리시버 사용\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.h2, null, \"Item 16. 프로퍼티는 동작이 아니라 상태를 나타내야 한다\"), \"\\n\", React.createElement(_components.p, null, \"코틀린의 프로퍼티는 사용자 정의 게터, 세터를 가질 수 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-kotlin\"\n  }, \"var name: String? = null\\n    get() = field?.toUpperCase()\\n    set(value) {\\n        if (!value.isNullOrBlank()) {\\n            field = value\\n        }\\n    }\\n\")), \"\\n\", React.createElement(_components.p, null, \"위 코드에서 field는 프로퍼티의 데이터를 저장해두는 백킹 필드(backing field)에 대한 레퍼런스이다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"프로퍼티는 필드가 필요 없다. 오히려 프로퍼티는 개념적으로 접근자를 나타낸다.\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"val의 경우 게터\"), \"\\n\", React.createElement(_components.li, null, \"var의 경우 게터와 세터\\n따라서 코틀린은 인터페이스에도 프로퍼티를 정의할 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-kotlin\"\n  }, \"interface Person {\\n    val name: String\\n}\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"마찬가지의 이유로 프로퍼티를 위임할 수도 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-kotlin\"\n  }, \"val db = Database by lazy { connectToDb() }\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"프로퍼티는 본질적으로 함수이므로 확장 프로퍼티를 만들 수도 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-kotlin\"\n  }, \"val Context.preferences: SharedPreferences\\n    get() = PreferenceManager.getDefaultSharedPreferences(this)\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"프로퍼티를 함수 대신 사용할 수 있지만, 완전히 대체하는 것은 좋지 않다.\", React.createElement(_components.br), \"\\n\", \"관습적으로 프로퍼티의 게터에서 무거운 연산 작업을 할 것이라고 예상하지 않기 때문이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-kotlin\"\n  }, \"// bad\\nval Tree<Int>.sum: Int\\n    get() = when (this) {\\n        is Leaf -> value\\n        is Node -> left.sum + right.sum\\n    }\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"어떤 것을 프로퍼티로 해야하는지 판단하기 위한 질문\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"이 프로퍼티를 함수로 정의할 경우, 접두사로 get 또는 set을 붙일 것인가?\", React.createElement(_components.br), \"\\n\", \"만약 아니라면, 프로퍼티로 만드는 것은 좋지 않다.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"프로퍼티 대신 함수를 사용하는 것이 좋은 경우\")), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"연산 비용이 높거나, 복잡도가 O(1)보다 큰 경우\"), \"\\n\", React.createElement(_components.li, null, \"비즈니스 로직(애플리케이션의 동작)을 포함하는 경우\"), \"\\n\", React.createElement(_components.li, null, \"결정적이지 않은 경우\"), \"\\n\", React.createElement(_components.li, null, \"변환의 경우\"), \"\\n\", React.createElement(_components.li, null, \"게터에서 프로퍼티의 상태 변경이 일어나야 하는 경우\"), \"\\n\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"특별한 이유가 없다면 함수를 사용하지 말자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-kotlin\"\n  }, \"// bad\\nclass UserIncorrect {\\n    private var name: String = \\\"\\\"\\n\\n    fun getName() = name\\n\\n    fun setName(name: String) {\\n        this.name = name\\n    }\\n}\\n\\n// good\\nclass UserCorrect {\\n    var name: String = \\\"\\\"\\n}\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/dy/Documents/blog/reading_contents/effective-kotlin-items-14-to-16.mdx\";\nimport React from 'react';\nimport Seo from '../components/Common/Seo';\nimport Template from '../components/Common/Template';\nimport PostHead from '../components/Post/PosstHead';\nimport PostContent from '../components/Post/PostContent';\nimport {jsx as ___EmotionJSX} from \"@emotion/react\";\nconst BlogPost = _ref => {\n  let {data, children} = _ref;\n  return ___EmotionJSX(Template, null, ___EmotionJSX(PostHead, {\n    title: data.mdx.frontmatter.title,\n    date: data.mdx.frontmatter.date,\n    categories: data.mdx.frontmatter.categories\n  }), ___EmotionJSX(PostContent, null, children));\n};\nconst query = \"3439641389\";\nexport const Head = _ref2 => {\n  let {data} = _ref2;\n  return ___EmotionJSX(Seo, {\n    title: data.mdx.frontmatter.title\n  });\n};\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","br","pre","code","h3","ul","li","strong","blockquote","_provideComponents","components","React","className","wrapper","MDXLayout","BlogPost","_ref","data","children","___EmotionJSX","Template","PostHead","title","mdx","frontmatter","date","categories","PostContent","Head","_ref2","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}